//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Player Kart Scripts/PlayerKartInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerKartInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerKartInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerKartInput"",
    ""maps"": [
        {
            ""name"": ""PlayerKart"",
            ""id"": ""98e65179-59cd-4566-89b5-bae78c114f61"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""a34ad68f-016e-4391-a378-8d988eb5416f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""f69dfb4e-84ce-4a3b-ab83-b98ef5db9d55"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drift"",
                    ""type"": ""Button"",
                    ""id"": ""6c453654-fcab-4884-9fd6-e71076dc1e7a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""3f616592-2ecb-4059-a137-fe2c466ef3a1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8f396b70-1ac4-49af-8f54-500e39ad82d8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""240a7444-0cff-4b72-a02b-70292fac6384"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dc42793-96f1-468d-85c7-204fcb5c35b7"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebbb0d37-b95f-4bf2-a84f-6213166f7fd9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""baf30f53-b5c0-4954-a41a-8e931147b8ab"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ab40d97-59cf-4a5f-b3a4-71dfa1d18a3c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""066f6eae-767f-4e34-b72b-9173dcef8a43"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerKart"",
            ""bindingGroup"": ""PlayerKart"",
            ""devices"": []
        }
    ]
}");
        // PlayerKart
        m_PlayerKart = asset.FindActionMap("PlayerKart", throwIfNotFound: true);
        m_PlayerKart_Forward = m_PlayerKart.FindAction("Forward", throwIfNotFound: true);
        m_PlayerKart_Backward = m_PlayerKart.FindAction("Backward", throwIfNotFound: true);
        m_PlayerKart_Drift = m_PlayerKart.FindAction("Drift", throwIfNotFound: true);
        m_PlayerKart_Horizontal = m_PlayerKart.FindAction("Horizontal", throwIfNotFound: true);
    }

    ~@PlayerKartInput()
    {
        UnityEngine.Debug.Assert(!m_PlayerKart.enabled, "This will cause a leak and performance issues, PlayerKartInput.PlayerKart.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerKart
    private readonly InputActionMap m_PlayerKart;
    private List<IPlayerKartActions> m_PlayerKartActionsCallbackInterfaces = new List<IPlayerKartActions>();
    private readonly InputAction m_PlayerKart_Forward;
    private readonly InputAction m_PlayerKart_Backward;
    private readonly InputAction m_PlayerKart_Drift;
    private readonly InputAction m_PlayerKart_Horizontal;
    public struct PlayerKartActions
    {
        private @PlayerKartInput m_Wrapper;
        public PlayerKartActions(@PlayerKartInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_PlayerKart_Forward;
        public InputAction @Backward => m_Wrapper.m_PlayerKart_Backward;
        public InputAction @Drift => m_Wrapper.m_PlayerKart_Drift;
        public InputAction @Horizontal => m_Wrapper.m_PlayerKart_Horizontal;
        public InputActionMap Get() { return m_Wrapper.m_PlayerKart; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerKartActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerKartActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerKartActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerKartActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Backward.started += instance.OnBackward;
            @Backward.performed += instance.OnBackward;
            @Backward.canceled += instance.OnBackward;
            @Drift.started += instance.OnDrift;
            @Drift.performed += instance.OnDrift;
            @Drift.canceled += instance.OnDrift;
            @Horizontal.started += instance.OnHorizontal;
            @Horizontal.performed += instance.OnHorizontal;
            @Horizontal.canceled += instance.OnHorizontal;
        }

        private void UnregisterCallbacks(IPlayerKartActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Backward.started -= instance.OnBackward;
            @Backward.performed -= instance.OnBackward;
            @Backward.canceled -= instance.OnBackward;
            @Drift.started -= instance.OnDrift;
            @Drift.performed -= instance.OnDrift;
            @Drift.canceled -= instance.OnDrift;
            @Horizontal.started -= instance.OnHorizontal;
            @Horizontal.performed -= instance.OnHorizontal;
            @Horizontal.canceled -= instance.OnHorizontal;
        }

        public void RemoveCallbacks(IPlayerKartActions instance)
        {
            if (m_Wrapper.m_PlayerKartActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerKartActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerKartActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerKartActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerKartActions @PlayerKart => new PlayerKartActions(this);
    private int m_PlayerKartSchemeIndex = -1;
    public InputControlScheme PlayerKartScheme
    {
        get
        {
            if (m_PlayerKartSchemeIndex == -1) m_PlayerKartSchemeIndex = asset.FindControlSchemeIndex("PlayerKart");
            return asset.controlSchemes[m_PlayerKartSchemeIndex];
        }
    }
    public interface IPlayerKartActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnDrift(InputAction.CallbackContext context);
        void OnHorizontal(InputAction.CallbackContext context);
    }
}
